package main

import (
	"context"
	"fmt"
	"github.com/joho/godotenv"

	"os"
	"path/filepath"
	"sort"
	"strings"

	"train-backend/internal/infrastructure/database"
)

func main() {
	// –ó–∞–≥—Ä—É–∂–∞–µ–º .env
	if err := godotenv.Load(); err != nil {
		fmt.Println("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å .env:", err)
	}

	ctx := context.Background()
	dbpool, err := database.NewPool(ctx)
	if err != nil {
		fmt.Printf("‚ùå –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î: %v\n", err)
		os.Exit(1)
	}
	defer dbpool.Close()

	migrationsDir := "migrations"
	files, err := os.ReadDir(migrationsDir)
	if err != nil {
		fmt.Printf("‚ùå –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –º–∏–≥—Ä–∞—Ü–∏–π: %v\n", err)
		os.Exit(1)
	}

	// —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
	sort.Slice(files, func(i, j int) bool {
		return files[i].Name() < files[j].Name()
	})

	for _, file := range files {
		if file.IsDir() || !strings.HasSuffix(file.Name(), ".sql") {
			continue
		}

		path := filepath.Join(migrationsDir, file.Name())
		content, err := os.ReadFile(path)
		if err != nil {
			fmt.Printf("üî¥ –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å %s: %v\n", file.Name(), err)
			continue
		}

		fmt.Printf("üü° –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –º–∏–≥—Ä–∞—Ü–∏—è: %s\n", file.Name())
		_, err = dbpool.Exec(ctx, string(content))
		if err != nil {
			fmt.Printf("üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ %s: %v\n", file.Name(), err)
			continue
		}

		fmt.Printf("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: %s\n", file.Name())
	}
}
